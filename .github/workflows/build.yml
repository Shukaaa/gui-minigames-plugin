name: Build and Release Minecraft Plugin

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  autotag:
    name: Auto Tag Based on Commit Message
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_latest_tag
        run: |
          TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $TAG"
          echo "latest_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Get last commit message
        id: commit_msg
        run: |
          MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $MSG"
          echo "message=$MSG" >> $GITHUB_OUTPUT

      - name: Determine bump type
        id: bump
        run: |
          MSG="${{ steps.commit_msg.outputs.message }}"
          BUMP="patch"
          if echo "$MSG" | grep -iqE "^(feat|feature):"; then
            BUMP="minor"
          elif echo "$MSG" | grep -iqE "^(major:|BREAKING CHANGE)"; then
            BUMP="major"
          fi
          echo "Bump type: $BUMP"
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Create next tag
        id: create_tag
        run: |
          VERSION=${{ steps.get_latest_tag.outputs.latest_tag }}
          IFS='.' read -r -a parts <<< "${VERSION#v}"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}

          case "${{ steps.bump.outputs.bump }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_TAG="v$major.$minor.$patch"
          echo "New tag will be: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

  build:
    name: Build Plugin
    needs: autotag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Build the Plugin
        run: ./gradlew shadowJar

      - name: Find Build Artifact
        id: find_jar
        run: echo "JAR_PATH=$(find build/libs -name '*.jar' | head -n 1)" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: minecraft-plugin
          path: ${{ env.JAR_PATH }}

  publish:
    name: Publish to GitHub Packages
    needs: [autotag, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Publish to GitHub Packages
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        run: ./gradlew publish

  release:
    name: Create GitHub Release
    needs: [autotag, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Built Jar
        uses: actions/download-artifact@v4
        with:
          name: minecraft-plugin
          path: .

      - name: Get Version from Tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          files: "*.jar"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
