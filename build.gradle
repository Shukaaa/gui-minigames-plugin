plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'rip.shuka'

def gitTag = 'git describe --tags --always'.execute().text.trim()
version = gitTag.startsWith("v") ? gitTag.substring(1) : gitTag

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'com.zaxxer:HikariCP:5.0.1'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set("")
    dependencies {
        exclude(dependency('org.jetbrains.kotlin:kotlin-stdlib'))
        exclude(dependency('org.jetbrains:annotations'))
    }
}

kotlin {
    jvmToolchain(21)
}

// Dev Tasks
def paperMcContainerName = "testi-papermc-server"
def dbContainerName = "testi-postgres"

tasks.register("checkAndRunDockerCompose") {
    group = "dev"
    description = "Prüft, ob Docker-Compose jemals ausgeführt wurde, und führt es aus, wenn es das erste Mal ist."

    doLast {
        println "Überprüfe, ob Docker-Compose-Container existieren..."

        def outputStream = new ByteArrayOutputStream()
        def errorOccurred = false

        exec {
            commandLine "docker", "ps", "-a", "--filter", "name=${paperMcContainerName}", "--format", "{{.Names}}"
            standardOutput = outputStream
            errorOutput = outputStream
            ignoreExitValue = true // Fehler ignorieren, falls "docker ps" keinen passenden Container findet
        }

        def containerExists = outputStream.toString().trim()

        if (containerExists.isEmpty()) {
            // Container existiert nicht, also Docker-Compose starten
            println "Container wurde bisher nicht erstellt. Starte docker-compose für das erste Mal..."
            try {
                exec {
                    commandLine "docker-compose", "--project-directory", "./dev", "up", "-d"
                }
                println "Docker-Compose wurde erfolgreich ausgeführt."
            } catch (Exception e) {
                println "Fehler beim Ausführen von Docker-Compose: ${e.message}"
                errorOccurred = true
            }
        } else {
            println "Container existiert bereits. Docker-Compose wird nicht erneut ausgeführt."
        }

        if (errorOccurred) {
            throw new GradleException("Fehler beim Starten von Docker-Compose.")
        }
    }
}

tasks.register("startDatabaseIfNotRunning") {
    group = "dev"
    description = "Prüft, ob die Datenbank läuft, und startet sie, falls sie nicht läuft."

    doLast {
        println "Überprüfe den Status des Datenbank-Containers: ${dbContainerName}..."

        def outputStream = new ByteArrayOutputStream()
        def errorOccurred = false

        try {
            // Prüfen, ob der Container läuft
            exec {
                commandLine "docker", "inspect", "--format", "{{.State.Running}}", dbContainerName
                standardOutput = outputStream
                errorOutput = outputStream
                ignoreExitValue = true // Ignoriere Exit-Fehler, wenn der Container nicht existiert
            }

            def isRunning = outputStream.toString().trim()

            if (isRunning == "true") {
                println "Datenbank-Container ${dbContainerName} läuft bereits."
            } else {
                println "Datenbank-Container ${dbContainerName} läuft nicht. Versuche, ihn zu starten..."
                try {
                    exec {
                        commandLine "docker", "start", dbContainerName
                    }
                    println "Datenbank-Container ${dbContainerName} wurde erfolgreich gestartet."
                } catch (Exception e) {
                    println "Fehler beim Starten des Containers: ${e.message}"
                    errorOccurred = true
                }
            }
        } catch (Exception e) {
            println "Fehler bei der Statusprüfung des Containers: ${e.message}"
            errorOccurred = true
        }

        if (errorOccurred) {
            throw new GradleException("Fehler beim Starten oder Prüfen des Datenbank-Containers.")
        }
    }
}

tasks.register("buildAndRunServer") {
    group = "dev"
    description = "Baut das Plugin und startet den Minecraft-Server neu."

    dependsOn tasks.checkAndRunDockerCompose
    dependsOn tasks.startDatabaseIfNotRunning
    dependsOn tasks.clean
    dependsOn tasks.shadowJar

    doLast {
        println "Stopping the PaperMC Docker container..."
        exec {
            commandLine "docker", "stop", paperMcContainerName
        }

        println "Starting the PaperMC Docker container..."
        exec {
            commandLine "docker", "start", paperMcContainerName
        }

        println "PaperMC Server has been restarted successfully."
    }
}